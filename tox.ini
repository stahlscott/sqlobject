[tox]
minversion = 2.0
envlist = py{27,34,35,36}-sqlite{,-memory},py{27,34}-flake8

# Base test environment settings
[testenv]
# Ensure we cd into sqlobject before running the tests
changedir = ./sqlobject/
basepython =
    py27: {env:TOXPYTHON:python2.7}
    py34: {env:TOXPYTHON:python3.4}
    py35: {env:TOXPYTHON:python3.5}
    py36: {env:TOXPYTHON:python3.6}
commands =
    {envpython} --version
    {envpython} -c "import struct; print(struct.calcsize('P') * 8)"
deps =
    -rdevscripts/requirements/requirements_tests.txt
    py27: egenix-mx-base
    mysqldb: mysql-python
    mysqlclient: mysqlclient
    mysql-connector: mysql-connector <= 2.2.2
    mysql-oursql: git+https://github.com/sqlobject/oursql.git@master#egg=oursql
    mysql-oursql3: git+https://github.com/sqlobject/oursql.git@py3k#egg=oursql
    pymysql: pymysql
    postgres-psycopg: psycopg2
    postgres-pygresql: pygresql
    pypostgresql: git+https://github.com/sqlobject/py-postgresql.git@fix_w32#egg=pypostgresql
    postgres-pg8000: git+https://github.com/sqlobject/pg8000.git@getuser#egg=pg8000
    pyodbc: pyodbc
    pypyodbc: pypyodbc
    firebird-fdb: fdb
    firebirdsql: firebirdsql
passenv = CI TRAVIS TRAVIS_* APPVEYOR DISTUTILS_USE_SDK MSSdk INCLUDE LIB PGPASSWORD WINDIR
# Don't fail or warn on uninstalled commands
platform = linux
whitelist_externals =
    mysql
    createdb
    dropdb
    rm
    sudo
    isql-fb
    sqlcmd

# MySQL test environments
[mysqldb]
commands =
    {[testenv]commands}
    -mysql -uroot -e 'drop database sqlobject_test;'
    mysql -uroot -e 'create database sqlobject_test;'
    pytest --cov=sqlobject -D mysql://root:@localhost/sqlobject_test?driver=mysqldb&debug=1
    mysql -uroot -e 'drop database sqlobject_test;'

[testenv:py27-mysqldb]
commands = {[mysqldb]commands}

[mysqlclient]
commands =
    {[testenv]commands}
    -mysql -uroot -e 'drop database sqlobject_test;'
    mysql -uroot -e 'create database sqlobject_test;'
    pytest --cov=sqlobject -D mysql://root:@localhost/sqlobject_test?driver=mysqldb&charset=utf8&debug=1
    mysql -uroot -e 'drop database sqlobject_test;'

[testenv:py34-mysqlclient]
commands = {[mysqlclient]commands}

[testenv:py35-mysqlclient]
commands = {[mysqlclient]commands}

[testenv:py36-mysqlclient]
commands = {[mysqlclient]commands}

[mysql-connector]
commands =
    {[testenv]commands}
    -mysql -uroot -e 'drop database sqlobject_test;'
    mysql -uroot -e 'create database sqlobject_test;'
    pytest --cov=sqlobject -D mysql://root:@localhost/sqlobject_test?driver=connector&charset=utf8&debug=1
    mysql -uroot -e 'drop database sqlobject_test;'

[testenv:py27-mysql-connector]
commands = {[mysql-connector]commands}

[testenv:py34-mysql-connector]
commands = {[mysql-connector]commands}

[testenv:py35-mysql-connector]
commands = {[mysql-connector]commands}

[testenv:py36-mysql-connector]
commands = {[mysql-connector]commands}

[oursql]
commands =
    {[testenv]commands}
    -mysql -uroot -e 'drop database sqlobject_test;'
    mysql -uroot -e 'create database sqlobject_test;'
    pytest --cov=sqlobject -D mysql://root:@localhost/sqlobject_test?driver=oursql&charset=utf8&debug=1
    mysql -uroot -e 'drop database sqlobject_test;'

[testenv:py27-mysql-oursql]
commands = {[oursql]commands}

[testenv:py34-mysql-oursql3]
commands = {[oursql]commands}

[testenv:py35-mysql-oursql3]
commands = {[oursql]commands}

[testenv:py36-mysql-oursql3]
commands = {[oursql]commands}

[pymysql]
commands =
    {[testenv]commands}
    -mysql -uroot -e 'drop database sqlobject_test;'
    mysql -uroot -e 'create database sqlobject_test;'
    pytest --cov=sqlobject -D mysql://root:@localhost/sqlobject_test?driver=pymysql&charset=utf8&debug=1
    mysql -uroot -e 'drop database sqlobject_test;'

[testenv:py27-pymysql]
commands = {[pymysql]commands}

[testenv:py34-pymysql]
commands = {[pymysql]commands}

[testenv:py35-pymysql]
commands = {[pymysql]commands}

[testenv:py36-pymysql]
commands = {[pymysql]commands}

[mysql-pyodbc]
commands =
    {[testenv]commands}
    {envpython} -c "import pyodbc; print(pyodbc.drivers())"
    -mysql -uroot -e 'drop database sqlobject_test;'
    mysql -uroot -e 'create database sqlobject_test;'
    pytest --cov=sqlobject -D mysql://root:@localhost/sqlobject_test?driver=pyodbc&odbcdrv=MySQL&charset=utf8&debug=1
    mysql -uroot -e 'drop database sqlobject_test;'

[testenv:py27-mysql-pyodbc]
commands = {[mysql-pyodbc]commands}

[testenv:py34-mysql-pyodbc]
commands = {[mysql-pyodbc]commands}

[testenv:py35-mysql-pyodbc]
commands = {[mysql-pyodbc]commands}

[testenv:py36-mysql-pyodbc]
commands = {[mysql-pyodbc]commands}

[mysql-pypyodbc]
commands =
    {[testenv]commands}
    -mysql -uroot -e 'drop database sqlobject_test;'
    mysql -uroot -e 'create database sqlobject_test;'
    pytest --cov=sqlobject -D mysql://root:@localhost/sqlobject_test?driver=pypyodbc&odbcdrv=MySQL&charset=utf8&debug=1
    mysql -uroot -e 'drop database sqlobject_test;'

[testenv:py27-mysql-pypyodbc]
commands = {[mysql-pypyodbc]commands}

[testenv:py34-mysql-pypyodbc]
commands = {[mysql-pypyodbc]commands}

[testenv:py35-mysql-pypyodbc]
commands = {[mysql-pypyodbc]commands}

[testenv:py36-mysql-pypyodbc]
commands = {[mysql-pypyodbc]commands}

# PostgreSQL test environments
[psycopg]
commands =
    {[testenv]commands}
    -dropdb -U postgres -w sqlobject_test
    createdb -U postgres -w sqlobject_test
    pytest --cov=sqlobject -D postgres://postgres:@localhost/sqlobject_test?driver=psycopg&charset=utf-8&debug=1 tests include/tests inheritance/tests versioning/test
    dropdb -U postgres -w sqlobject_test

[testenv:py27-postgres-psycopg]
commands = {[psycopg]commands}

[testenv:py34-postgres-psycopg]
commands = {[psycopg]commands}

[testenv:py35-postgres-psycopg]
commands = {[psycopg]commands}

[testenv:py36-postgres-psycopg]
commands = {[psycopg]commands}

[pygresql]
commands =
    {[testenv]commands}
    -dropdb -U postgres -w sqlobject_test
    createdb -U postgres -w sqlobject_test
    pytest --cov=sqlobject -D postgres://postgres:@localhost/sqlobject_test?driver=pygresql&charset=utf-8&debug=1 tests include/tests inheritance/tests versioning/test
    dropdb -U postgres -w sqlobject_test

[testenv:py27-postgres-pygresql]
commands = {[pygresql]commands}

[testenv:py34-postgres-pygresql]
commands = {[pygresql]commands}

[testenv:py35-postgres-pygresql]
commands = {[pygresql]commands}

[testenv:py36-postgres-pygresql]
commands = {[pygresql]commands}

[pypostgresql]
commands =
    {[testenv]commands}
    -dropdb -U postgres -w sqlobject_test
    createdb -U postgres -w sqlobject_test
    pytest --cov=sqlobject -D postgres://postgres:@localhost/sqlobject_test?driver=pypostgresql&charset=utf-8&debug=1 tests include/tests inheritance/tests versioning/test
    dropdb -U postgres -w sqlobject_test

[testenv:py34-pypostgresql]
commands = {[pypostgresql]commands}

[testenv:py35-pypostgresql]
commands = {[pypostgresql]commands}

[testenv:py36-pypostgresql]
commands = {[pypostgresql]commands}

[pg8000]
commands =
    {[testenv]commands}
    -dropdb -U postgres -w sqlobject_test
    createdb -U postgres -w sqlobject_test
    pytest --cov=sqlobject -D postgres://postgres:@localhost/sqlobject_test?driver=pg8000&charset=utf-8&debug=1 tests include/tests inheritance/tests versioning/test
    dropdb -U postgres -w sqlobject_test

[testenv:py27-postgres-pg8000]
commands = {[pg8000]commands}

[testenv:py34-postgres-pg8000]
commands = {[pg8000]commands}

[testenv:py35-postgres-pg8000]
commands = {[pg8000]commands}

[testenv:py36-postgres-pg8000]
commands = {[pg8000]commands}

[postgres-pyodbc]
commands =
    {[testenv]commands}
    {envpython} -c "import pyodbc; print(pyodbc.drivers())"
    -dropdb -U postgres -w sqlobject_test
    createdb -U postgres -w sqlobject_test
    pytest --cov=sqlobject -D postgres://postgres:@localhost/sqlobject_test?driver=pyodbc&odbcdrv=PostgreSQL%20ANSI&charset=utf-8&debug=1 tests include/tests inheritance/tests versioning/test
    dropdb -U postgres -w sqlobject_test

[testenv:py27-postgres-pyodbc]
commands = {[postgres-pyodbc]commands}

[testenv:py34-postgres-pyodbc]
commands = {[postgres-pyodbc]commands}

[testenv:py35-postgres-pyodbc]
commands = {[postgres-pyodbc]commands}

[testenv:py36-postgres-pyodbc]
commands = {[postgres-pyodbc]commands}

[postgres-pypyodbc]
commands =
    {[testenv]commands}
    -dropdb -U postgres -w sqlobject_test
    createdb -U postgres -w sqlobject_test
    pytest --cov=sqlobject -D postgres://postgres:@localhost/sqlobject_test?driver=pypyodbc&odbcdrv=PostgreSQL%20ANSI&charset=utf-8&debug=1 tests include/tests inheritance/tests versioning/test
    dropdb -U postgres -w sqlobject_test

[testenv:py27-postgres-pypyodbc]
commands = {[postgres-pypyodbc]commands}

[testenv:py34-postgres-pypyodbc]
commands = {[postgres-pypyodbc]commands}

[testenv:py35-postgres-pypyodbc]
commands = {[postgres-pypyodbc]commands}

[testenv:py36-postgres-pypyodbc]
commands = {[postgres-pypyodbc]commands}


# SQLite test environments
[sqlite]
commands =
    {[testenv]commands}
    -rm -f /tmp/sqlobject_test.sqdb
    pytest --cov=sqlobject -D sqlite:///tmp/sqlobject_test.sqdb?debug=1
    rm -f /tmp/sqlobject_test.sqdb

[testenv:py27-sqlite]
commands = {[sqlite]commands}

[testenv:py34-sqlite]
commands = {[sqlite]commands}

[testenv:py35-sqlite]
commands = {[sqlite]commands}

[testenv:py36-sqlite]
commands = {[sqlite]commands}

[sqlite-memory]
commands =
    {[testenv]commands}
    pytest --cov=sqlobject -D sqlite:/:memory:?debug=1

[testenv:py27-sqlite-memory]
commands = {[sqlite-memory]commands}

[testenv:py34-sqlite-memory]
commands = {[sqlite-memory]commands}

[testenv:py35-sqlite-memory]
commands = {[sqlite-memory]commands}

[testenv:py36-sqlite-memory]
commands = {[sqlite-memory]commands}

# Firebird database test environments
[fdb]
commands =
    {[testenv]commands}
    sudo rm -f /tmp/test.fdb
    isql-fb -u test -p test -i /var/lib/firebird/create_test_db
    pytest --cov=sqlobject -D 'firebird://test:test@localhost/tmp/test.fdb?debug=1'
    sudo rm -f /tmp/test.fdb

[testenv:py27-firebird-fdb]
commands = {[fdb]commands}

[testenv:py34-firebird-fdb]
commands = {[fdb]commands}

[testenv:py35-firebird-fdb]
commands = {[fdb]commands}

[testenv:py36-firebird-fdb]
commands = {[fdb]commands}

[firebirdsql]
commands =
    {[testenv]commands}
    sudo rm -f /tmp/test.fdb
    isql-fb -u test -p test -i /var/lib/firebird/create_test_db
    pytest --cov=sqlobject -D 'firebird://test:test@localhost:3050/tmp/test.fdb?driver=firebirdsql&charset=utf8&debug=1'
    sudo rm -f /tmp/test.fdb

[testenv:py27-firebirdsql]
commands = {[firebirdsql]commands}

[testenv:py34-firebirdsql]
commands = {[firebirdsql]commands}

[testenv:py35-firebirdsql]
commands = {[firebirdsql]commands}

[testenv:py36-firebirdsql]
commands = {[firebirdsql]commands}

# Special test environments
[testenv:py27-flake8]
changedir = ./
deps =
    flake8
commands =
    {[testenv]commands}
    flake8 .

[testenv:py34-flake8]
changedir = ./
deps =
    flake8
commands =
    {[testenv]commands}
    flake8 .

# Windows testing
[mssql-pyodbc-w32]
platform = win32
commands =
    {envpython} -c "import pyodbc; print(pyodbc.drivers())"
    -sqlcmd -U sa -P "Password12!" -S .\SQL2014 -Q "DROP DATABASE sqlobject_test"
    sqlcmd -U sa -P "Password12!" -S .\SQL2014 -Q "CREATE DATABASE sqlobject_test"
    pytest --cov=sqlobject -D "mssql://sa:Password12!@localhost\SQL2014/sqlobject_test?driver=pyodbc&odbcdrv=SQL%20Server&timeout=30&debug=1" tests/test_transactions.py
    sqlcmd -U sa -P "Password12!" -S .\SQL2014 -Q "DROP DATABASE sqlobject_test"

[testenv:py27-mssql-pyodbc-w32]
platform = win32
commands = {[mssql-pyodbc-w32]commands}

[testenv:py34-mssql-pyodbc-w32]
platform = win32
commands = {[mssql-pyodbc-w32]commands}

[testenv:py35-mssql-pyodbc-w32]
platform = win32
commands = {[mssql-pyodbc-w32]commands}

[testenv:py36-mssql-pyodbc-w32]
platform = win32
commands = {[mssql-pyodbc-w32]commands}

[mysql-connector-w32]
platform = win32
commands =
    {[testenv]commands}
    -mysql -u root "-pPassword12!" -e 'drop database sqlobject_test;'
    mysql -u root "-pPassword12!" -e 'create database sqlobject_test;'
    pytest --cov=sqlobject -D "mysql://root:Password12!@localhost/sqlobject_test?driver=connector&charset=utf8&debug=1"
    mysql -u root "-pPassword12!" -e 'drop database sqlobject_test;'

[testenv:py27-mysql-connector-w32]
platform = win32
commands = {[mysql-connector-w32]commands}

[testenv:py34-mysql-connector-w32]
platform = win32
commands = {[mysql-connector-w32]commands}

[testenv:py35-mysql-connector-w32]
platform = win32
commands = {[mysql-connector-w32]commands}

[testenv:py36-mysql-connector-w32]
platform = win32
commands = {[mysql-connector-w32]commands}

[pymysql-w32]
platform = win32
commands =
    {[testenv]commands}
    -mysql -u root "-pPassword12!" -e 'drop database sqlobject_test;'
    mysql -u root "-pPassword12!" -e 'create database sqlobject_test;'
    pytest --cov=sqlobject -D "mysql://root:Password12!@localhost/sqlobject_test?driver=pymysql&charset=utf8&debug=1"
    mysql -u root "-pPassword12!" -e 'drop database sqlobject_test;'

[testenv:py27-pymysql-w32]
platform = win32
commands = {[pymysql-w32]commands}

[testenv:py34-pymysql-w32]
platform = win32
commands = {[pymysql-w32]commands}

[testenv:py35-pymysql-w32]
platform = win32
commands = {[pymysql-w32]commands}

[testenv:py36-pymysql-w32]
platform = win32
commands = {[pymysql-w32]commands}

[mysql-pyodbc-w32]
platform = win32
commands =
    {[testenv]commands}
    {envpython} -c "import pyodbc; print(pyodbc.drivers())"
    -mysql -u root "-pPassword12!" -e 'drop database sqlobject_test;'
    mysql -u root "-pPassword12!" -e 'create database sqlobject_test;'
    pytest --cov=sqlobject -D mysql://root:Password12!@localhost/sqlobject_test?driver=pyodbc&odbcdrv=MySQL%20ODBC%205.3%20ANSI%20Driver&charset=utf8&debug=1
    mysql -u root "-pPassword12!" -e 'drop database sqlobject_test;'

[testenv:py27-mysql-pyodbc-w32]
platform = win32
commands = {[mysql-pyodbc-w32]commands}

[testenv:py34-mysql-pyodbc-w32]
platform = win32
commands = {[mysql-pyodbc-w32]commands}

[testenv:py35-mysql-pyodbc-w32]
platform = win32
commands = {[mysql-pyodbc-w32]commands}

[testenv:py36-mysql-pyodbc-w32]
platform = win32
commands = {[mysql-pyodbc-w32]commands}

[mysql-pypyodbc-w32]
platform = win32
commands =
    {[testenv]commands}
    {envpython} -c "import pypyodbc; print(pypyodbc.drivers())"
    -mysql -u root "-pPassword12!" -e 'drop database sqlobject_test;'
    mysql -u root "-pPassword12!" -e 'create database sqlobject_test;'
    pytest --cov=sqlobject -D mysql://root:Password12!@localhost/sqlobject_test?driver=pypyodbc&odbcdrv=MySQL%20ODBC%205.3%20ANSI%20Driver&charset=utf8&debug=1
    mysql -u root "-pPassword12!" -e 'drop database sqlobject_test;'

[testenv:py27-mysql-pypyodbc-w32]
platform = win32
commands = {[mysql-pypyodbc-w32]commands}

[testenv:py34-mysql-pypyodbc-w32]
platform = win32
commands = {[mysql-pypyodbc-w32]commands}

[testenv:py35-mysql-pypyodbc-w32]
platform = win32
commands = {[mysql-pypyodbc-w32]commands}

[testenv:py36-mysql-pypyodbc-w32]
platform = win32
commands = {[mysql-pypyodbc-w32]commands}

[psycopg-w32]
platform = win32
commands =
    {[testenv]commands}
    -dropdb -U postgres -w sqlobject_test
    createdb -U postgres -w sqlobject_test
    pytest --cov=sqlobject -D "postgres://postgres:Password12!@localhost/sqlobject_test?driver=psycopg2&charset=utf-8&debug=1" tests include/tests inheritance/tests versioning/test
    dropdb -U postgres -w sqlobject_test

[testenv:py27-postgres-psycopg-w32]
platform = win32
commands = {[psycopg-w32]commands}

[testenv:py34-postgres-psycopg-w32]
platform = win32
commands = {[psycopg-w32]commands}

[testenv:py35-postgres-psycopg-w32]
platform = win32
commands = {[psycopg-w32]commands}

[testenv:py36-postgres-psycopg-w32]
platform = win32
commands = {[psycopg-w32]commands}

[pygresql-w32]
platform = win32
commands =
    {[testenv]commands}
    -dropdb -U postgres -w sqlobject_test
    createdb -U postgres -w sqlobject_test
    pytest --cov=sqlobject -D "postgres://postgres:Password12!@localhost/sqlobject_test?driver=pygresql&charset=utf-8&debug=1" tests include/tests inheritance/tests versioning/test
    dropdb -U postgres -w sqlobject_test

[testenv:py27-postgres-pygresql-w32]
platform = win32
commands = {[pygresql-w32]commands}

[testenv:py34-postgres-pygresql-w32]
platform = win32
commands = {[pygresql-w32]commands}

[testenv:py35-postgres-pygresql-w32]
platform = win32
commands = {[pygresql-w32]commands}

[testenv:py36-postgres-pygresql-w32]
platform = win32
commands = {[pygresql-w32]commands}

[pypostgresql-w32]
platform = win32
commands =
    {[testenv]commands}
    -dropdb -U postgres -w sqlobject_test
    createdb -U postgres -w sqlobject_test
    pytest --cov=sqlobject -D "postgres://postgres:Password12!@localhost/sqlobject_test?driver=pypostgresql&charset=utf-8&debug=1" tests include/tests inheritance/tests versioning/test
    dropdb -U postgres -w sqlobject_test

[testenv:py34-pypostgresql-w32]
platform = win32
commands = {[pypostgresql-w32]commands}

[testenv:py35-pypostgresql-w32]
platform = win32
commands = {[pypostgresql-w32]commands}

[testenv:py36-pypostgresql-w32]
platform = win32
commands = {[pypostgresql-w32]commands}

[pg8000-w32]
platform = win32
commands =
    {[testenv]commands}
    -dropdb -U postgres -w sqlobject_test
    createdb -U postgres -w sqlobject_test
    pytest --cov=sqlobject -D "postgres://postgres:Password12!@localhost/sqlobject_test?driver=pg8000&charset=utf-8&debug=1" tests include/tests inheritance/tests versioning/test
    dropdb -U postgres -w sqlobject_test

[testenv:py27-postgres-pg8000-w32]
platform = win32
commands = {[pg8000-w32]commands}

[testenv:py34-postgres-pg8000-w32]
platform = win32
commands = {[pg8000-w32]commands}

[testenv:py35-postgres-pg8000-w32]
platform = win32
commands = {[pg8000-w32]commands}

[testenv:py36-postgres-pg8000-w32]
platform = win32
commands = {[pg8000-w32]commands}

[postgres-pyodbc-w32]
platform = win32
commands =
    {[testenv]commands}
    {envpython} -c "import pyodbc; print(pyodbc.drivers())"
    -dropdb -U postgres -w sqlobject_test
    createdb -U postgres -w sqlobject_test
    pytest --cov=sqlobject -D "postgres://postgres:Password12!@localhost/sqlobject_test?driver=pyodbc&odbcdrv=PostgreSQL%20ANSI%28x64%29&charset=utf-8&debug=1" tests include/tests inheritance/tests versioning/test
    dropdb -U postgres -w sqlobject_test

[testenv:py27-postgres-pyodbc-w32]
platform = win32
commands = {[postgres-pyodbc-w32]commands}

[testenv:py34-postgres-pyodbc-w32]
platform = win32
commands = {[postgres-pyodbc-w32]commands}

[testenv:py35-postgres-pyodbc-w32]
platform = win32
commands = {[postgres-pyodbc-w32]commands}

[testenv:py36-postgres-pyodbc-w32]
platform = win32
commands = {[postgres-pyodbc-w32]commands}

[postgres-pypyodbc-w32]
platform = win32
commands =
    {[testenv]commands}
    {envpython} -c "import pypyodbc; print(pypyodbc.drivers())"
    -dropdb -U postgres -w sqlobject_test
    createdb -U postgres -w sqlobject_test
    pytest --cov=sqlobject -D "postgres://postgres:Password12!@localhost/sqlobject_test?driver=pypyodbc&odbcdrv=PostgreSQL%20ANSI%28x64%29&charset=utf-8&debug=1" tests include/tests inheritance/tests versioning/test
    dropdb -U postgres -w sqlobject_test

[testenv:py27-postgres-pypyodbc-w32]
platform = win32
commands = {[postgres-pypyodbc-w32]commands}

[testenv:py34-postgres-pypyodbc-w32]
platform = win32
commands = {[postgres-pypyodbc-w32]commands}

[testenv:py35-postgres-pypyodbc-w32]
platform = win32
commands = {[postgres-pypyodbc-w32]commands}

[testenv:py36-postgres-pypyodbc-w32]
platform = win32
commands = {[postgres-pypyodbc-w32]commands}

[sqlite-w32]
platform = win32
commands =
    {[testenv]commands}
    pytest --cov=sqlobject -D sqlite:/C:/projects/sqlobject/sqlobject_test.sqdb?debug=1

[testenv:py27-sqlite-w32]
platform = win32
commands = {[sqlite-w32]commands}

[testenv:py34-sqlite-w32]
platform = win32
commands = {[sqlite-w32]commands}

[testenv:py35-sqlite-w32]
platform = win32
commands = {[sqlite-w32]commands}

[testenv:py36-sqlite-w32]
platform = win32
commands = {[sqlite-w32]commands}

[sqlite-memory-w32]
platform = win32
commands =
    {[testenv]commands}
    pytest --cov=sqlobject -D sqlite:/:memory:?debug=1

[testenv:py27-sqlite-memory-w32]
platform = win32
commands = {[sqlite-memory-w32]commands}

[testenv:py34-sqlite-memory-w32]
platform = win32
commands = {[sqlite-memory-w32]commands}

[testenv:py35-sqlite-memory-w32]
platform = win32
commands = {[sqlite-memory-w32]commands}

[testenv:py36-sqlite-memory-w32]
platform = win32
commands = {[sqlite-memory-w32]commands}
